# Configure actual data sources
dataSources:
    # Configure the first data source
    ds0: !!com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://188.131.247.10:3306/shardingsphere_test1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: dwj
        password: DWJ2128033qaz!
    # Configure the second data source
    ds1: !!com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://188.131.247.10:3306/shardingsphere_test2?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: dwj
        password: DWJ2128033qaz!

rules:
- !SHARDING # 注意这一行和下一行的格式！
    tables:
        t_order: # 以下配置为 t_order 分片均匀分布在两个数据源中
            actualDataNodes: ds${0..1}.t_order_${0..2} # ds${0..1} ———— 为上面配置的 ds0、ds1 两个数据库; t_order_${0..2} ———— 为数据库中存在 t_order_0、t_order_1、t_order_2 三个分片
            tableStrategy:
                standard:
                    shardingColumn: order_id
                    shardingAlgorithmName: t_order_inline
            keyGenerateStrategy:
                column: order_id
                keyGeneratorName: snowflake
        t_order_item: # 以下配置为 t_order_item 分片均匀分布在两个数据源中
            actualDataNodes: ds${0..1}.t_order_item_${0..1} # ds${0..1} ———— 为上面配置的 ds0、ds1 两个数据库; t_order_${0..2} ———— 为数据库中存在 t_order_item_0、t_order_item_1、t_order_item_2 三个分片
            tableStrategy:
                standard:
                    shardingColumn: order_id
                    shardingAlgorithmName: t_order_item_inline
            keyGenerateStrategy:
                column: order_item_id
                keyGeneratorName: snowflake
    bindingTables: # 绑定数据表，按照分片配置在所有数据源中读写
        - t_order,t_order_item
    broadcastTables: # 广播数据表，将数据广播到所有数据源，保持不同数据源数据一致性
        - t_address
    defaultDatabaseStrategy:
        standard:
            shardingColumn: user_id
            shardingAlgorithmName: database_inline
    defaultTableStrategy:
        none:

    shardingAlgorithms:
        database_inline: # 定义一个分片算法（该分片算法适用于数据库分片策略【databaseStrategy】、数据表分片策略【tableStrategy】）
            type: INLINE
            props:
                algorithm-expression: ds${user_id % 2} # 储存策略，user_id 为奇数时数据写入 ds_0 数据源的分片中，user_id 为偶数时数据写入 ds_1 数据源的分片中。
        t_order_inline: # 定义一个分片算法（该分片算法适用于数据库分片策略【databaseStrategy】、数据表分片策略【tableStrategy】）
            type: INLINE
            props:
                algorithm-expression: t_order_${user_id % 2}
        t_order_item_inline: # 定义一个分片算法（该分片算法适用于数据库分片策略【databaseStrategy】、数据表分片策略【tableStrategy】）
            type: INLINE
            props:
                algorithm-expression: t_order_item_${user_id % 2}

    keyGenerators:
        snowflake:
            type: SNOWFLAKE
            props:
                worker-id: 123 # 雪花算法的分布式 uuid 的 workId

props:
    sql-show: true
